name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: terraform/${{ matrix.env }}
    
    env:
      TF_VAR_cf_user:     ${{ secrets[matrix.cf_user] }}
      TF_VAR_cf_password: ${{ secrets[matrix.cf_password] }}

    strategy:
      matrix:
        env: [staging]
        include:
          - env: production
            name: Production
            cf_user: CF_USER_PRODUCTION
            cf_password: CF_PASSWORD_PRODUCTION
          - env: staging
            name: Staging
            cf_user: CF_USER_STAGING
            cf_password: CF_PASSWORD_STAGING

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.2

    - name: Create Backend Config File
      id: create-config
      run: |
        echo "access_key = "\""$BACKEND_AWS_ACCESS_KEY_ID"\""" >> ./backend-config.tfvars
        echo "secret_key = "\""$BACKEND_AWS_SECRET_ACCESS_KEY"\""" >> ./backend-config.tfvars
        echo "region = "\""$BACKEND_AWS_DEFAULT_REGION"\""" >> ./backend-config.tfvars

    - name: Terraform Init
      id: init
      run: terraform init -input=false -backend-config=./backend-config.tfvars

    - name: Terraform Format
      id: format
      run: terraform fmt -check

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -no-color

    - name: Create Plan Comment
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const displayOutcome = outcome => outcome === 'success' ? '✅': '❌';

          const output = `
            ## Terraforming *${{ matrix.name }}*
            #### Format: ${displayOutcome('${{ steps.format.outcome }}')}
            #### Init:   ${displayOutcome('${{ steps.init.outcome }}')}
            #### Plan:   ${displayOutcome('${{ steps.plan.outcome }}')}
            <details><summary>Show Plan</summary>
            <pre><code>${{ steps.plan.outputs.stdout }}</code></pre>
            </details>
          `;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -input=false -auto-approve
